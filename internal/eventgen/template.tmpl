// file generated by eventgen

package ari

import (
   "encoding/json"
   "errors"
)

// EventTypes enumerates the list of event types
type EventTypes struct {
	All string
	{{range .}}{{.Name}} string
	{{end}}
}

// Events is the instance for grabbing event types
var Events EventTypes

func init() {
	Events.All = "all"
	{{range .}} Events.{{.Name}} = "{{.Event}}"
	{{end}}
}

// DecodeEvent returns an Event from a byte slice of JSON data of a RawEvent
func DecodeEvent(data []byte) (Event, error) {
	var raw RawEvent
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, err
	}

	return raw.ToEvent()
}

// RawEvent is a raw ARI event, structured as a JSON-unmarshallable Go structure to facilitate decoding.
type RawEvent struct {
   Header Header  `json:"header"`
   Type string `json:"type"`

{{range .}}
   // {{.Name}} - "{{.Description}}"
   {{.Name}} *{{.Name}} `json:",inline,omitempty"`
{{end}}
}

// ToEvent converts a RawEvent to an Evert, preseving any transport Headers associated with the RawEvent.
func (r *RawEvent) ToEvent() (Event, error) {
   if r.Header == nil {
      r.Header = make(Header)
   }

	switch r.Type {
	{{range .}}case Events.{{.Name}}:
      r.{{.Name}}.Header = r.Header
      return r.{{.Name}}, nil
	{{end}}
	default:
      return nil, errors.New("Unhandled event type: "+ r.Type)
	}
}

{{range .}}
// {{.Name}} - "{{.Description}}"
type {{.Name}} struct {
   EventData

   // Header describes any transport-related metadata
   Header Header `json:"-"`

	{{range .Properties}}{{.Name}} {{.Type}} {{.Mapping}} {{.Description}}
	{{end}} }
{{end}}
