// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/CyCoreSystems/ari/ext/audio (interfaces: Player)

package mock

import (
	ari "github.com/CyCoreSystems/ari"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Player interface
type MockPlayer struct {
	ctrl     *gomock.Controller
	recorder *_MockPlayerRecorder
}

// Recorder for MockPlayer (not exported)
type _MockPlayerRecorder struct {
	mock *MockPlayer
}

func NewMockPlayer(ctrl *gomock.Controller) *MockPlayer {
	mock := &MockPlayer{ctrl: ctrl}
	mock.recorder = &_MockPlayerRecorder{mock}
	return mock
}

func (_m *MockPlayer) EXPECT() *_MockPlayerRecorder {
	return _m.recorder
}

func (_m *MockPlayer) Play(_param0 string, _param1 string) (*ari.PlaybackHandle, error) {
	ret := _m.ctrl.Call(_m, "Play", _param0, _param1)
	ret0, _ := ret[0].(*ari.PlaybackHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPlayerRecorder) Play(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Play", arg0, arg1)
}

func (_m *MockPlayer) Subscribe(_param0 ...string) ari.Subscription {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Subscribe", _s...)
	ret0, _ := ret[0].(ari.Subscription)
	return ret0
}

func (_mr *_MockPlayerRecorder) Subscribe(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Subscribe", arg0...)
}
