// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ari.proto

/*
	Package ari is a generated protocol buffer package.

	It is generated from these files:
		ari.proto

	It has these top-level messages:
		Key
		CallerID
		ChannelData
		DialplanCEP
*/
package ari

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Key identifies a unique resource in the system
type Key struct {
	// Kind indicates the type of resource the Key points to.  e.g., "channel",
	// "bridge", etc.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// ID indicates the unique identifier of the resource
	ID string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Node indicates the unique identifier of the Asterisk node on which the
	// resource exists or will be created
	Node string `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	// Dialog indicates a named scope of the resource, for receiving events
	Dialog string `protobuf:"bytes,4,opt,name=dialog,proto3" json:"dialog,omitempty"`
	// App indiciates the ARI application that this key is bound to.
	App string `protobuf:"bytes,5,opt,name=app,proto3" json:"app,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptorAri, []int{0} }

func (m *Key) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Key) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Key) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *Key) GetDialog() string {
	if m != nil {
		return m.Dialog
	}
	return ""
}

func (m *Key) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

// CallerID describes the name and number which identifies the caller to other endpoints
type CallerID struct {
	// Name is the name of the party
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Number is the number of the party
	Number string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *CallerID) Reset()                    { *m = CallerID{} }
func (*CallerID) ProtoMessage()               {}
func (*CallerID) Descriptor() ([]byte, []int) { return fileDescriptorAri, []int{1} }

func (m *CallerID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CallerID) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

// ChannelData describes the data for a specific channel
type ChannelData struct {
	// Key is the key of the channel
	Key *Key `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Id is the unique ID for this channel (AMI-style)
	ID string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Name is the name of this channel (tect/name-id)
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// State is the current state of the channel
	State string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// Accountcode is the account code assigned to the channel
	Accountcode string `protobuf:"bytes,5,opt,name=accountcode,proto3" json:"accountcode,omitempty"`
	// Caller is the callerID of the calling endpoint
	Caller *CallerID `protobuf:"bytes,6,opt,name=caller" json:"caller,omitempty"`
	// Connected is the callerID of the connected line, if applicable
	Connected *CallerID `protobuf:"bytes,7,opt,name=connected" json:"connected,omitempty"`
	// Creationtime is the time at which the channel was created
	Creationtime *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=creationtime" json:"creationtime,omitempty"`
	// Dialplan is the current location of the channel in the dialplan
	Dialplan *DialplanCEP `protobuf:"bytes,9,opt,name=dialplan" json:"dialplan,omitempty"`
}

func (m *ChannelData) Reset()                    { *m = ChannelData{} }
func (m *ChannelData) String() string            { return proto.CompactTextString(m) }
func (*ChannelData) ProtoMessage()               {}
func (*ChannelData) Descriptor() ([]byte, []int) { return fileDescriptorAri, []int{2} }

func (m *ChannelData) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ChannelData) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ChannelData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelData) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ChannelData) GetAccountcode() string {
	if m != nil {
		return m.Accountcode
	}
	return ""
}

func (m *ChannelData) GetCaller() *CallerID {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *ChannelData) GetConnected() *CallerID {
	if m != nil {
		return m.Connected
	}
	return nil
}

func (m *ChannelData) GetCreationtime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Creationtime
	}
	return nil
}

func (m *ChannelData) GetDialplan() *DialplanCEP {
	if m != nil {
		return m.Dialplan
	}
	return nil
}

// Dialplan describes a location in the Asterisk dialplan
type DialplanCEP struct {
	// Context describes the section in the dialplan
	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Exten describes the label in the section of the dialplan
	Exten string `protobuf:"bytes,2,opt,name=exten,proto3" json:"exten,omitempty"`
	// Priority indicates the index at the label in the section of the dialplan
	Priority int64 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (m *DialplanCEP) Reset()                    { *m = DialplanCEP{} }
func (m *DialplanCEP) String() string            { return proto.CompactTextString(m) }
func (*DialplanCEP) ProtoMessage()               {}
func (*DialplanCEP) Descriptor() ([]byte, []int) { return fileDescriptorAri, []int{3} }

func (m *DialplanCEP) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *DialplanCEP) GetExten() string {
	if m != nil {
		return m.Exten
	}
	return ""
}

func (m *DialplanCEP) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func init() {
	proto.RegisterType((*Key)(nil), "asterisk.ari.Key")
	proto.RegisterType((*CallerID)(nil), "asterisk.ari.CallerID")
	proto.RegisterType((*ChannelData)(nil), "asterisk.ari.ChannelData")
	proto.RegisterType((*DialplanCEP)(nil), "asterisk.ari.DialplanCEP")
}
func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Node) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.Node)))
		i += copy(dAtA[i:], m.Node)
	}
	if len(m.Dialog) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.Dialog)))
		i += copy(dAtA[i:], m.Dialog)
	}
	if len(m.App) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.App)))
		i += copy(dAtA[i:], m.App)
	}
	return i, nil
}

func (m *CallerID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallerID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Number) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.Number)))
		i += copy(dAtA[i:], m.Number)
	}
	return i, nil
}

func (m *ChannelData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAri(dAtA, i, uint64(m.Key.Size()))
		n1, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Accountcode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.Accountcode)))
		i += copy(dAtA[i:], m.Accountcode)
	}
	if m.Caller != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAri(dAtA, i, uint64(m.Caller.Size()))
		n2, err := m.Caller.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Connected != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAri(dAtA, i, uint64(m.Connected.Size()))
		n3, err := m.Connected.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Creationtime != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAri(dAtA, i, uint64(m.Creationtime.Size()))
		n4, err := m.Creationtime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Dialplan != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAri(dAtA, i, uint64(m.Dialplan.Size()))
		n5, err := m.Dialplan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *DialplanCEP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialplanCEP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Context) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.Context)))
		i += copy(dAtA[i:], m.Context)
	}
	if len(m.Exten) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAri(dAtA, i, uint64(len(m.Exten)))
		i += copy(dAtA[i:], m.Exten)
	}
	if m.Priority != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAri(dAtA, i, uint64(m.Priority))
	}
	return i, nil
}

func encodeFixed64Ari(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Ari(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAri(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Key) Size() (n int) {
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	l = len(m.Dialog)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	return n
}

func (m *CallerID) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	return n
}

func (m *ChannelData) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovAri(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	l = len(m.Accountcode)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	if m.Caller != nil {
		l = m.Caller.Size()
		n += 1 + l + sovAri(uint64(l))
	}
	if m.Connected != nil {
		l = m.Connected.Size()
		n += 1 + l + sovAri(uint64(l))
	}
	if m.Creationtime != nil {
		l = m.Creationtime.Size()
		n += 1 + l + sovAri(uint64(l))
	}
	if m.Dialplan != nil {
		l = m.Dialplan.Size()
		n += 1 + l + sovAri(uint64(l))
	}
	return n
}

func (m *DialplanCEP) Size() (n int) {
	var l int
	_ = l
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	l = len(m.Exten)
	if l > 0 {
		n += 1 + l + sovAri(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovAri(uint64(m.Priority))
	}
	return n
}

func sovAri(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAri(x uint64) (n int) {
	return sovAri(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAri
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialog = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAri(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAri
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallerID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAri
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallerID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallerID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAri(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAri
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAri
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accountcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Caller == nil {
				m.Caller = &CallerID{}
			}
			if err := m.Caller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connected == nil {
				m.Connected = &CallerID{}
			}
			if err := m.Connected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creationtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creationtime == nil {
				m.Creationtime = &google_protobuf1.Timestamp{}
			}
			if err := m.Creationtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialplan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dialplan == nil {
				m.Dialplan = &DialplanCEP{}
			}
			if err := m.Dialplan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAri(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAri
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialplanCEP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAri
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialplanCEP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialplanCEP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exten", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAri
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exten = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAri
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAri(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAri
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAri(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAri
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAri
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAri
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAri
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAri
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAri(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAri = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAri   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ari.proto", fileDescriptorAri) }

var fileDescriptorAri = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xbd, 0x6e, 0xdb, 0x30,
	0x10, 0xae, 0x24, 0x47, 0xb1, 0xcf, 0x19, 0x1a, 0xa2, 0x30, 0x58, 0x0f, 0x76, 0xe0, 0x2e, 0x5d,
	0xca, 0x00, 0xfd, 0x59, 0x8a, 0xa2, 0x43, 0xec, 0x0e, 0x41, 0x96, 0x42, 0xe8, 0xd2, 0x6e, 0x67,
	0xea, 0xaa, 0x10, 0x96, 0x48, 0x81, 0xa6, 0x80, 0xf8, 0x4d, 0x3a, 0xf6, 0x71, 0x3a, 0xf6, 0x09,
	0x8a, 0xc2, 0xaf, 0xd0, 0x17, 0x28, 0x48, 0x49, 0x89, 0xbd, 0x64, 0xbb, 0xef, 0xf8, 0xdd, 0x7d,
	0xfc, 0xee, 0x83, 0x11, 0x5a, 0x25, 0x6a, 0x6b, 0x9c, 0x61, 0x67, 0xb8, 0x75, 0x64, 0xd5, 0x76,
	0x23, 0xd0, 0xaa, 0xe9, 0xab, 0x42, 0xb9, 0xdb, 0x66, 0x2d, 0xa4, 0xa9, 0x2e, 0x0b, 0x53, 0x98,
	0xcb, 0x40, 0x5a, 0x37, 0xdf, 0x03, 0x0a, 0x20, 0x54, 0xed, 0xf0, 0x74, 0x5e, 0x18, 0x53, 0x94,
	0xf4, 0xc0, 0x72, 0xaa, 0xa2, 0xad, 0xc3, 0xaa, 0x6e, 0x09, 0x8b, 0x06, 0x92, 0x1b, 0xda, 0x31,
	0x06, 0x83, 0x8d, 0xd2, 0x39, 0x8f, 0x2e, 0xa2, 0x97, 0xa3, 0x2c, 0xd4, 0x6c, 0x02, 0xb1, 0xca,
	0x79, 0xec, 0x3b, 0x57, 0xe9, 0xfe, 0xcf, 0x3c, 0xbe, 0x5e, 0x65, 0xb1, 0xca, 0x3d, 0x57, 0x9b,
	0x9c, 0x78, 0xd2, 0x72, 0x7d, 0xcd, 0x26, 0x90, 0xe6, 0x0a, 0x4b, 0x53, 0xf0, 0x41, 0xe8, 0x76,
	0x88, 0x3d, 0x85, 0x04, 0xeb, 0x9a, 0x9f, 0x84, 0xa6, 0x2f, 0xdf, 0x0f, 0x7e, 0xfc, 0x9c, 0x3f,
	0x59, 0x7c, 0x80, 0xe1, 0x12, 0xcb, 0x92, 0xec, 0xf5, 0x2a, 0xec, 0xc3, 0x8a, 0x7a, 0x6d, 0x5f,
	0xfb, 0x7d, 0xba, 0xa9, 0xd6, 0x64, 0x5b, 0xfd, 0xac, 0x43, 0xdd, 0xf4, 0xbf, 0x18, 0xc6, 0xcb,
	0x5b, 0xd4, 0x9a, 0xca, 0x15, 0x3a, 0x64, 0x2f, 0x20, 0xd9, 0xd0, 0x2e, 0x2c, 0x18, 0xbf, 0x3e,
	0x17, 0x87, 0x07, 0x13, 0x37, 0xb4, 0xcb, 0xfc, 0xeb, 0xa3, 0x76, 0xbc, 0x7c, 0x72, 0x20, 0xff,
	0x0c, 0x4e, 0xb6, 0x0e, 0x1d, 0x75, 0x6e, 0x5a, 0xc0, 0x2e, 0x60, 0x8c, 0x52, 0x9a, 0x46, 0x3b,
	0xe9, 0xfd, 0xb7, 0xa6, 0x0e, 0x5b, 0x4c, 0x40, 0x2a, 0x83, 0x2d, 0x9e, 0x86, 0xbf, 0x4c, 0x8e,
	0xff, 0xd2, 0x5b, 0xce, 0x3a, 0x16, 0x7b, 0x0b, 0x23, 0x69, 0xb4, 0x26, 0xe9, 0x28, 0xe7, 0xa7,
	0x8f, 0x8e, 0x3c, 0x10, 0xd9, 0x47, 0x38, 0x93, 0x96, 0xd0, 0x29, 0xa3, 0x7d, 0x9c, 0x7c, 0x18,
	0x06, 0xa7, 0xa2, 0xcd, 0x5a, 0xf4, 0x59, 0x8b, 0x2f, 0x7d, 0xd6, 0xd9, 0x11, 0x9f, 0xbd, 0x83,
	0xa1, 0x8f, 0xa7, 0x2e, 0x51, 0xf3, 0x51, 0x98, 0x7d, 0x7e, 0x2c, 0xba, 0xea, 0x5e, 0x97, 0x9f,
	0x3e, 0x67, 0xf7, 0xd4, 0xc5, 0x57, 0x18, 0x1f, 0x3c, 0x30, 0x0e, 0xa7, 0xd2, 0x68, 0x47, 0x77,
	0xae, 0x4b, 0xae, 0x87, 0xfe, 0x7a, 0x74, 0xe7, 0x48, 0x77, 0xd9, 0xb5, 0x80, 0x4d, 0x61, 0x58,
	0x5b, 0x65, 0xac, 0x72, 0xbb, 0x70, 0xeb, 0x24, 0xbb, 0xc7, 0x57, 0xe7, 0xbf, 0xf6, 0xb3, 0xe8,
	0xf7, 0x7e, 0x16, 0xfd, 0xdd, 0xcf, 0xa2, 0x6f, 0x09, 0x5a, 0xb5, 0x4e, 0x83, 0x8d, 0x37, 0xff,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xf1, 0xc5, 0x46, 0x0a, 0x03, 0x00, 0x00,
}
